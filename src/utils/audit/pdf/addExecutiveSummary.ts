
import { jsPDF } from "jspdf";
import { AuditEvent } from '@/components/audit/types';
import { Industry } from '@/utils/types';
import { INDUSTRY_REGULATIONS } from '@/utils/types';
import { mapToIndustryType } from '../industryUtils';

/**
 * Add executive summary section to the PDF document
 */
export const addExecutiveSummary = (
  doc: jsPDF, 
  auditEvents: AuditEvent[], 
  documentName: string
): number => {
  // Starting position
  let yPos = 20;
  
  // Add report title
  doc.setFontSize(20);
  doc.setTextColor(0, 51, 102);
  doc.text('Audit Trail Report', 105, yPos, { align: 'center' });
  
  // Add document details section
  yPos += 25;
  doc.setFontSize(16);
  doc.setTextColor(0, 51, 102);
  doc.text('Executive Summary', 20, yPos);
  
  // Add metadata
  yPos += 10;
  doc.setFontSize(10);
  doc.setTextColor(80, 80, 80);
  doc.text(`Date: ${new Date().toLocaleString()}`, 20, yPos);
  
  yPos += 7;
  // Extract industry from document name if possible
  const industry = extractIndustryFromDocument(documentName, auditEvents);
  doc.text(`Organization: ${documentName.split('-')[0] || 'Organization'}`, 20, yPos);
  
  // Add applicable compliance frameworks
  yPos += 7;
  const frameworks = determineComplianceFrameworks(auditEvents, industry);
  doc.text(`Compliance Framework: ${frameworks.join(', ')}`, 20, yPos);
  
  // Add industry info if available
  yPos += 7;
  if (industry) {
    doc.text(`Industry: ${industry}`, 20, yPos);
    yPos += 7;
  }
  
  // Add generated by info
  doc.text(`Generated By: AI Compliance System`, 20, yPos);
  
  // Add a brief description of the report
  yPos += 15;
  doc.setFontSize(10);
  doc.setTextColor(0, 0, 0);
  const description = "This report provides an AI-enhanced analysis of your compliance audit trail, " +
    "highlighting key risks, offering recommendations, and summarizing overall compliance status.";
  
  // Wrap text to ensure it fits on the page
  const descriptionLines = doc.splitTextToSize(description, 170);
  doc.text(descriptionLines, 20, yPos);
  
  // Adjust Y position based on number of lines
  yPos += descriptionLines.length * 7;
  
  // Add separator line
  yPos += 5;
  doc.setDrawColor(200, 200, 200);
  doc.setLineWidth(0.5);
  doc.line(20, yPos, 190, yPos);
  
  return yPos;
};

/**
 * Determine applicable compliance frameworks from audit events and industry
 */
const determineComplianceFrameworks = (auditEvents: AuditEvent[], industry?: Industry): string[] => {
  // If we have an industry, use its regulations as primary frameworks
  if (industry && INDUSTRY_REGULATIONS[industry]) {
    return INDUSTRY_REGULATIONS[industry];
  }
  
  // Otherwise look for mentions of frameworks in event text
  const frameworks: Set<string> = new Set();
  
  auditEvents.forEach(event => {
    const eventText = JSON.stringify(event).toLowerCase();
    
    if (eventText.includes('gdpr')) frameworks.add('GDPR');
    if (eventText.includes('hipaa')) frameworks.add('HIPAA');
    if (eventText.includes('pci') || eventText.includes('pci-dss')) frameworks.add('PCI-DSS');
    if (eventText.includes('soc 2') || eventText.includes('soc2')) frameworks.add('SOC 2');
    if (eventText.includes('iso27001') || eventText.includes('iso 27001')) frameworks.add('ISO 27001');
  });
  
  // Return default frameworks if none detected
  return frameworks.size > 0 
    ? Array.from(frameworks) 
    : ['GDPR', 'HIPAA', 'PCI-DSS'];
};

/**
 * Extract the industry from document name or audit events
 * Enhanced to provide more accurate detection for healthcare and other industries
 */
const extractIndustryFromDocument = (documentName: string, auditEvents: AuditEvent[]): Industry | undefined => {
  // Special case check for healthcare first
  const docNameLower = documentName.toLowerCase();
  if (docNameLower.includes('health') || 
      docNameLower.includes('medical') || 
      docNameLower.includes('hospital') || 
      docNameLower.includes('clinic') || 
      docNameLower.includes('patient') || 
      docNameLower.includes('care') ||
      docNameLower.includes('doctor') ||
      docNameLower.includes('hipaa')) {
    return 'Healthcare';
  }
  
  // Then try to extract from document name with standard mapping
  const industryFromName = mapToIndustryType(documentName);
  if (industryFromName) return industryFromName;
  
  // If no industry from name, check for healthcare keywords in audit events
  const eventsText = auditEvents.map(event => 
    JSON.stringify(event.action) + ' ' + 
    JSON.stringify(event.comments)
  ).join(' ');
  
  // Look specifically for healthcare indicators first
  if (eventsText.toLowerCase().includes('patient') || 
      eventsText.toLowerCase().includes('health') || 
      eventsText.toLowerCase().includes('medical') || 
      eventsText.toLowerCase().includes('hipaa') ||
      eventsText.toLowerCase().includes('hospital') ||
      eventsText.toLowerCase().includes('doctor') ||
      eventsText.toLowerCase().includes('clinic')) {
    return 'Healthcare';
  }
  
  // Try other industries based on the event content
  if (eventsText.toLowerCase().includes('financial') || eventsText.toLowerCase().includes('payment')) {
    return 'Finance & Banking';
  }
  
  // Default to undefined if no clear industry is detected
  return undefined;
};
