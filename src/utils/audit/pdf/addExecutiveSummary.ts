
import { jsPDF } from 'jspdf';
import { AuditEvent } from '@/components/audit/types';
import { Industry } from '@/utils/types';
import { INDUSTRY_REGULATIONS } from '@/utils/types/common';

/**
 * Add executive summary section to the PDF report
 */
export const addExecutiveSummary = (
  doc: jsPDF, 
  auditEvents: AuditEvent[], 
  documentName: string, 
  industry?: Industry,
  complianceScore?: number,
  complianceStatus?: string
): number => {
  // Add the report title
  doc.setFontSize(24);
  doc.setTextColor(0, 51, 102);
  doc.text('Executive Summary', 20, 20);
  
  // Current date and time
  const currentDate = new Date();
  const formattedDate = `${currentDate.toLocaleDateString()}, ${currentDate.toLocaleTimeString()}`;
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  doc.text(`Date: ${formattedDate}`, 20, 30);
  
  // Organization info (derived from document name)
  const organizationName = documentName.includes(".") 
    ? documentName 
    : `${documentName}.pdf`;
  doc.text(`Organization: ${organizationName}`, 20, 37);
  
  // Add industry info if available
  if (industry) {
    doc.text(`Industry: ${industry}`, 20, 44);
    
    // Add applicable compliance frameworks based on industry
    const frameworks = industry && INDUSTRY_REGULATIONS[industry] 
      ? INDUSTRY_REGULATIONS[industry].join(', ')
      : 'General Compliance Standards';
    doc.text(`Compliance Framework: ${frameworks}`, 20, 51);
  }

  // Add generated by info
  doc.text(`Generated By: AI Compliance System`, 20, industry ? 58 : 51);
  
  // Add compliance score if available 
  const yPosAfterHeader = industry ? 72 : 65;
  
  if (complianceScore !== undefined) {
    doc.setFontSize(14);
    
    // Set color based on compliance score
    if (complianceScore >= 80) {
      doc.setTextColor(0, 128, 0); // Green for good compliance
    } else if (complianceScore >= 60) {
      doc.setTextColor(255, 165, 0); // Orange for moderate compliance
    } else {
      doc.setTextColor(200, 0, 0); // Red for poor compliance
    }
    
    doc.text(`Compliance Score: ${complianceScore}%`, 20, yPosAfterHeader);
    
    // Reset text color
    doc.setTextColor(0, 0, 0);
  }
  
  // Add compliance status if available
  if (complianceStatus) {
    doc.setFontSize(14);
    
    // Set color based on status
    if (complianceStatus === 'Compliant') {
      doc.setTextColor(0, 128, 0); // Green for compliant
    } else {
      doc.setTextColor(200, 0, 0); // Red for non-compliant
    }
    
    doc.text(`Status: ${complianceStatus}`, 20, complianceScore !== undefined ? yPosAfterHeader + 7 : yPosAfterHeader);
    
    // Reset text color
    doc.setTextColor(0, 0, 0);
  }
  
  // Add summary description
  const summaryYPos = (complianceStatus ? yPosAfterHeader + 21 : (complianceScore !== undefined ? yPosAfterHeader + 14 : yPosAfterHeader + 7));
  
  doc.setFontSize(11);
  doc.setTextColor(0, 0, 0);
  
  const summaryText = "This report provides an AI-enhanced analysis of your compliance audit trail, highlighting key risks, offering recommendations, and summarizing overall compliance status.";
  
  const wrappedText = doc.splitTextToSize(summaryText, 170);
  doc.text(wrappedText, 20, summaryYPos);
  
  // Return the current y position after the executive summary
  return summaryYPos + wrappedText.length * 7 + 5;
};
