
import { jsPDF } from 'jspdf';
import { ComplianceReport } from '../types';
import { saveAs } from 'file-saver';

/**
 * Export formats supported by the application
 */
export type ExportFormat = 'pdf' | 'docx' | 'csv' | 'json';

/**
 * Sanitize filename by removing invalid characters
 */
const sanitizeFilename = (filename: string): string => {
  return filename.replace(/[^a-z0-9]/gi, '-').toLowerCase();
};

/**
 * Generate a filename with current date for the report
 */
export const generateReportFilename = (report: ComplianceReport, format: ExportFormat): string => {
  const date = new Date();
  const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
  const sanitizedName = sanitizeFilename(report.documentName);
  
  return `${sanitizedName}-compliance-report-${formattedDate}.${format}`;
};

/**
 * Export compliance report as CSV
 */
export const exportReportAsCSV = (report: ComplianceReport): void => {
  // Headers for CSV
  let csvContent = "Title,Category,Severity,Description,Regulation\n";
  
  // Add risks to CSV
  report.risks.forEach(risk => {
    // Escape commas and quotes in fields
    const safeDescription = risk.description.replace(/"/g, '""');
    csvContent += `"${risk.title}","${risk.severity}","${risk.severity}","${safeDescription}","${risk.regulation}"\n`;
  });
  
  // Create blob and download
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const filename = generateReportFilename(report, 'csv');
  saveAs(blob, filename);
};

/**
 * Export compliance report as JSON
 */
export const exportReportAsJSON = (report: ComplianceReport): void => {
  // Convert to JSON string with pretty formatting
  const jsonContent = JSON.stringify(report, null, 2);
  
  // Create blob and download
  const blob = new Blob([jsonContent], { type: 'application/json' });
  const filename = generateReportFilename(report, 'json');
  saveAs(blob, filename);
};

/**
 * Export compliance report as DOCX (simplified version)
 * Note: This is a placeholder that creates a simple text file with .docx extension
 * A full implementation would require a library like docx.js
 */
export const exportReportAsDOCX = (report: ComplianceReport): void => {
  // Create a simple text representation
  let content = `Compliance Report: ${report.documentName}\n`;
  content += `Date: ${new Date().toLocaleDateString()}\n\n`;
  content += `Industry: ${report.industry || 'N/A'}\n`;
  content += `Overall Score: ${report.overallScore}%\n\n`;
  
  content += "Compliance Issues:\n";
  report.risks.forEach((risk, index) => {
    content += `${index + 1}. ${risk.title} - ${risk.severity.toUpperCase()}\n`;
    content += `   Description: ${risk.description}\n`;
    content += `   Regulation: ${risk.regulation}\n\n`;
  });
  
  content += "\nGenerated by Nexabloom (nexabloom.xyz)";
  
  // Create blob and download
  const blob = new Blob([content], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
  const filename = generateReportFilename(report, 'docx');
  saveAs(blob, filename);
};

/**
 * Export compliance report in the specified format
 */
export const exportReport = (report: ComplianceReport, format: ExportFormat): void => {
  switch (format) {
    case 'csv':
      exportReportAsCSV(report);
      break;
    case 'json':
      exportReportAsJSON(report);
      break;
    case 'docx':
      exportReportAsDOCX(report);
      break;
    case 'pdf':
      // PDF export is already handled separately
      break;
  }
};
